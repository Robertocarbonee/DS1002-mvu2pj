{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNQdsD7uYzG87Lcmt8cOz78",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Robertocarbonee/DS1002-mvu2pj/blob/main/Rock%20paper%20scissors\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "kFRM1IGrd1JG",
        "outputId": "9d96fb2a-d881-4c88-ce15-92dfd04d871c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'paper'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 1
        }
      ],
      "source": [
        "from random import randint\n",
        "\n",
        "t= [\"rock\", \"paper\", \"scissors\"]\n",
        "\n",
        "t[1]"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from random import randint\n",
        "\n",
        "t= [\"rock\", \"paper\", \"scissors\"]\n",
        "\n",
        "computer= t[randint(0,2)]\n",
        "computer"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "v2iD4d-seMni",
        "outputId": "ea3017a5-c543-4aa7-e922-7530f65f2095"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'rock'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "player = input (\"rock, paper, scissors?\")\n",
        "\n",
        "if player==computer:\n",
        "  print(\"we have a tie!\")\n",
        "if player == \"rock\":\n",
        "  if computer == \"scissors\":\n",
        "    print(f\"Computer guessed {computer}. You win!\")\n",
        "  else:\n",
        "    print(f\"computer guessed {computer}. Computer wins\")\n",
        "if player == \"paper\":\n",
        "  if computer == \"rock\":\n",
        "    print(f\"Computer guessed {computer}. You win!\")\n",
        "  else:\n",
        "    print(f\"computer guessed {computer}. Computer wins\")\n",
        "if player == \"scissors\":\n",
        "  if computer == \"paper\":\n",
        "    print(f\"Computer guessed {computer}. You win!\")\n",
        "  else:\n",
        "    print(f\"computer guessed {computer}. Computer wins\")\n",
        "else:\n",
        "    print(f\"you guessed {player}. Try again. Something went wrong\")\n",
        "\n",
        "computer = t[randint(0,2)]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mK_aT-nzeix7",
        "outputId": "205db9f7-727c-4fd3-96f3-ea135e2743a5"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "rock, paper, scissors?scissors\n",
            "we have a tie!\n",
            "computer guessed scissors. Computer wins\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "\n",
        "def generate_random_number(min_value, max_value):\n",
        "    if min_value > max_value:\n",
        "        min_value, max_value = max_value, min_value\n",
        "    return random.randint(min_value, max_value)\n",
        "\n",
        "\n",
        "random_number = generate_random_number(-2000, 2000)\n",
        "print(random_number)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qk-Df8JViPby",
        "outputId": "c1d4e602-8a3e-4d01-e917-ac3f46c25560"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "148\n"
          ]
        }
      ]
    }
  ]
}